" Need to include references... (:
" Get the defaults that most users want.
" source $VIMRUNTIME/defaults.vim

" Plugins - managed with vim-plug
" Automating installation process
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
"let data_dir = '~/.config/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Nice sets
syntax on

set noerrorbells

" Set format
set tabstop=4 softtabstop=4
set shiftwidth=4
set expandtab
set smartindent
" Display line number
set number relativenumber
set nu
set colorcolumn=80
highlight ColorColumn ctermbg=0 guibg=lightgrey

set smartcase
set incsearch

" Remove backup and undofile
set nobackup
set noundofile
set noswapfile

" Add custom directory to store all swap files
set directory=~/.vim/swaps/

" Setting custom .viminfo path
set viminfofile=~/.vim/.viminfo


" Plugins will be downloaded under the specified directory.
call plug#begin('~/.vim/plugged')

" Declare the list of plugins.
Plug 'tpope/vim-fugitive' "git plugin for vim
Plug 'tpope/vim-sensible' "some nice defaults
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'mg979/vim-visual-multi', {'branch': 'master'} "multi-cursor
Plug 'ctrlpvim/ctrlp.vim'
" https://vimawesome.com/plugin/vim-ps1
Plug 'pprovost/vim-ps1'
if v:version >= 810
  Plug 'valloric/youcompleteme'
endif

" List ends here. Plugins become visible to Vim after this call.
call plug#end()

colorscheme dracula

" Options for CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

let g:ctrlp_working_path_mode = 'ra'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_user_command = 'find %s -type f'
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
let g:ctrlp_use_caching = 0

" Status-line
let g:currentmode={
       \ 'n'  : 'NORMAL',
       \ 'v'  : 'VISUAL',
       \ 'V'  : 'V·Line',
       \ '' : 'V·Block',
       \ 'i'  : 'INSERT',
       \ 'R'  : 'R',
       \ 'Rv' : 'V·Replace',
       \ 'c'  : 'Command',
       \}

set statusline=
set statusline+=\[%{toupper(g:currentmode[mode()])}]\ "
set statusline+=\FilePath:\ %F
set statusline+=\ -\ FileType:\ %y
